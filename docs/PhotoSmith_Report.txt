Photo Smith – System Report (v3.0.1)

Cover

Project: Photo Smith (Image Studio GUI)
Version: 3.0.1
Institution: Faculty of Computers and Artificial Intelligence, Cairo University (FCAI)
Section: S33, Group B, Lab 7
Team:
  Ahmed Mohamed ElSayed Tolba (ID: 20242023)
  Eyad Mohamed Saad Ali (ID: 20242062)
  Tarek Sami Mohamed Mohamed (ID: 20242190)

Logo path: assets/icons/logo.png

1) System Structure

1.1 High-level Architecture

┌──────────────────────────────────────────────────────────┐
│                    Presentation Layer                    │
│  ┌─────────────────┐  ┌────────────────────────────────┐ │
│  │   Main Window   │  │        Qt Designer UI          │ │
│  │  (QMainWindow)  │  │      (src/gui/mainwindow.ui)   │ │
│  └─────────────────┘  └────────────────────────────────┘ │
└──────────────────────────────────────────────────────────┘
┌──────────────────────────────────────────────────────────┐
│                   Application Layer                      │
│  ┌─────────────────────────────────────────────────────┐ │
│  │                PhotoSmith class                     │ │
│  │ (src/gui/photo_smith.cpp)                           │ │
│  │  - Signal/slot wiring                               │ │
│  │  - Undo/redo and history                            │ │
│  │  - Progress and cancellation                        │ │
│  │  - Smart display (aspect ratio)                     │ │
│  └─────────────────────────────────────────────────────┘ │
└──────────────────────────────────────────────────────────┘
┌──────────────────────────────────────────────────────────┐
│                    Business Logic                        │
│  ┌─────────────────────────────────────────────────────┐ │
│  │              ImageFilters                            │ │
│  │ (src/core/filters/ImageFilters.h / .cpp)             │ │
│  │  - Filters (color, geometric, effects)               │ │
│  │  - Progress updates and status messages              │ │
│  │  - Atomic cancellation                              │ │
│  └─────────────────────────────────────────────────────┘ │
└──────────────────────────────────────────────────────────┘
┌──────────────────────────────────────────────────────────┐
│                   Data and Utilities                     │
│  ┌─────────────────────────────────────────────────────┐ │
│  │ Image (src/core/image/Image_Class.*)                 │ │
│  │ I/O    (src/core/io/ImageIO.h)                       │ │
│  │ History(src/core/history/HistoryManager.h)           │ │
│  │ STB    (third_party/stb)                             │ │
│  └─────────────────────────────────────────────────────┘ │
└──────────────────────────────────────────────────────────┘

1.2 Notable Design Choices
- Cancellation: long-running filters check an atomic flag each row, restoring preFilterImage on cancel with clear status messages.
- UI Responsiveness: progress updates throttle using QApplication::processEvents() and update intervals.
- Undo/Redo: image history plus a parallel stack for the active filter label keeps UI state consistent with edits.

2) Sample Screens (placeholders)

Add screenshots to docs/screens/ and they will be referenced here:
- Main window idle: docs/screens/main_idle.png
- Image loaded: docs/screens/image_loaded.png
- Filters in action (progress): docs/screens/filter_progress.png
- Example outputs (Emboss, Double Vision, Fish-Eye): docs/screens/outputs_collage.png

Folder layout suggestion:
docs/
  screens/
    main_idle.png
    image_loaded.png
    filter_progress.png
    outputs_collage.png

3) Tools and Technologies

- Programming Language: C++20
- Framework: Qt 6 (Widgets, Multimedia)
- Imaging I/O: stb_image, stb_image_write
- Build System: CMake and Ninja (generated), CLion/CMake presets, Windows batch scripts in scripts/
- Packaging: Portable bundle under build_portable/PhotoSmith_Portable
- Documentation: Doxygen (HTML under docs/api/html)

4) Team – Who Did What

- Ahmed Mohamed ElSayed Tolba (ID: 20242023)
  Selected tasks: Small IDs (1, 4, 7, 10), bonus 17, menu wiring
- Eyad Mohamed Saad Ali (ID: 20242062)
  Selected tasks: Middle IDs (2, 5, 8, 11), bonus 15, menu wiring
- Tarek Sami Mohamed Mohamed (ID: 20242190)
  Selected tasks: Large IDs (3, 6, 9, 12), bonus 16, menu wiring

Note: Roles are also reflected in file headers in ImageFilters and photo_smith.cpp.

5) New Filters – Creative Algorithms

5.1 Emboss (relief shading)
Concept: approximate per-pixel gradient by differencing a diagonal neighbor, biasing by +128, then grayscale.

Algorithm summary:
- For each pixel (x, y): take current (x, y) and neighbor (x+1, y+1)
- Channel-wise difference plus bias, clamp, average to gray, write to all channels
- Long-running variant supports progress updates and cancellation

Reference implementation (immediate): src/core/filters/ImageFilters.cpp lines 1100–1122 (applyEmboss immediate)
Cancelable variant with progress: src/core/filters/ImageFilters.cpp lines 1124–1150 (applyEmboss with cancellation)

Why it works: the biased difference simulates a height-map lit from one side, giving a metallic relief.

5.2 Double Vision (parallax blend)
Concept: horizontally offset a second sample and blend channels with a slight red bias to emulate chromatic parallax or ghosting.

Algorithm summary:
- For each pixel (x, y): sample (x, y) and (x+offset, y)
- Blend as 60/40; add a small red lift to simulate optical separation

Reference implementation (immediate): src/core/filters/ImageFilters.cpp lines 1152–1178 (applyDoubleVision immediate)
Cancelable variant with progress: src/core/filters/ImageFilters.cpp lines 1180–1210 (applyDoubleVision with cancellation)

Creative twist: a gentle red channel boost mimics binocular color separation often seen in analog captures.

5.3 Fish-Eye (barrel distortion remap)
Concept: radial coordinate remapping that compresses distances near edges, simulating a wide-angle lens.

Algorithm summary:
- Normalize pixel vector from center to (dx, dy), compute r = sqrt(dx^2 + dy^2)
- For r in (0, 1): new_r = r^(0.75); map back to source, clamp, sample
- Outside radius: copy as is

Reference implementation (immediate): src/core/filters/ImageFilters.cpp lines 1338–1366 (applyFishEye immediate)
Cancelable variant with progress: src/core/filters/ImageFilters.cpp lines 1368–1400 (applyFishEye with cancellation)

Why it works: the exponent less than 1 compresses radii, pulling edges inward to create the fish-eye look without expensive lens models.

6) Complex or Important Filters – Highlights

6.1 Edge Detection (Sobel with Gaussian pre-blur)
- Weighted grayscale, then 5x5 Gaussian blur, then Sobel X/Y, then magnitude and threshold to white-on-black edges.
Reference: src/core/filters/ImageFilters.cpp lines 901–989 (applyEdges)

Impact: robust edges with noise resilience from pre-blur; good for outlines and further stylization.

6.2 Oil Painting (mode color in local histogram)
- For each pixel neighborhood, bin by intensity level; choose the most frequent level and average RGB for that level.
Reference: src/core/filters/ImageFilters.cpp lines 1212–1251 (applyOilPainting immediate)

Effect: painterly, blocky strokes that preserve local color coherence.

6.3 TV/CRT (scanlines, color temperature, noise)
- Periodic dark scanlines, brightness-dependent color temperature shifts, and small random noise for analog feel.
Reference: src/core/filters/ImageFilters.cpp lines 175–285 (applyTVFilter)

User experience: visually rich retro effect with adjustable progress and cancel behavior for responsiveness.

7) UI Highlights

- Real-time progress with cancel button surfaced during long filters
- Smart display sizing to preserve aspect ratio and avoid unnecessary upscaling
- Drag and drop load and drag-to-merge behavior
- Interactive crop with rubber-band selection

8) How to Export this Report to PDF (Windows)

Quickest method (no installs):
1. Open this file in Microsoft Edge or any Markdown viewer that can print.
2. Press Ctrl+P. Choose printer “Microsoft Print to PDF”. Save.

With VS Code:
1. Install the extension “Markdown PDF”.
2. Right-click in the document. Choose “Markdown PDF: Export (pdf)”.

With Pandoc (PowerShell):
1. Install Pandoc: winget install Pandoc.Pandoc
2. Convert: pandoc -s docs/PhotoSmith_Report.md -o docs/PhotoSmith_Report.pdf

9) Why We Deserve a Prize

- Thoughtful user experience: responsive progress, cancel, undo/redo, and clear status messages.
- Engineering rigor: consistent cancellation pattern; careful clamping and bounds checks.
- Creative filters: Double Vision’s color-aware blend and Fish-Eye’s analytic remap provide striking visuals with simple, fast math.
- Portable delivery: one-folder portable build with all Qt dependencies for easy evaluation.
